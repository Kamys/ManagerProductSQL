CREATE TABLE attributes
(
    id INTEGER PRIMARY KEY NOT NULL,
    name CHAR(30) NOT NULL,
    description TEXT
);
CREATE TABLE attributes_value
(
    id INTEGER PRIMARY KEY NOT NULL,
    id_attribute INTEGER NOT NULL,
    value TEXT NOT NULL,
    CONSTRAINT attribute_value_attributes_id_fk FOREIGN KEY (id_attribute) REFERENCES attributes (id)
);
CREATE TABLE category
(
    id INTEGER PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    description TEXT
);
CREATE TABLE goods
(
    id INTEGER PRIMARY KEY NOT NULL,
    cost INTEGER NOT NULL,
    description TEXT
);
CREATE TABLE layouts
(
    id INTEGER PRIMARY KEY NOT NULL,
    name CHAR(30) NOT NULL,
    description TEXT
);
CREATE TABLE leafs
(
    id INTEGER PRIMARY KEY NOT NULL,
    name CHAR(30) NOT NULL,
    id_category INTEGER NOT NULL,
    description TEXT,
    CONSTRAINT leaf_category_id_fk FOREIGN KEY (id_category) REFERENCES category (id)
);
CREATE TABLE link_category_and_category
(
    id INTEGER PRIMARY KEY NOT NULL,
    id_parent INTEGER NOT NULL,
    path LTREE NOT NULL,
    CONSTRAINT link_category_and_category_category_id_fk FOREIGN KEY (id_parent) REFERENCES category (id)
);
CREATE TABLE link_goods_and_attribute_value
(
    id INTEGER PRIMARY KEY NOT NULL,
    id_goods INTEGER NOT NULL,
    id_attribute_value INTEGER NOT NULL,
    CONSTRAINT goods_data_goods_id_fk FOREIGN KEY (id_goods) REFERENCES goods (id),
    CONSTRAINT goods_data_attribute_value_id_fk FOREIGN KEY (id_attribute_value) REFERENCES attributes_value (id)
);
CREATE TABLE link_goods_and_leafs
(
    id INTEGER PRIMARY KEY NOT NULL,
    id_leafs INTEGER NOT NULL,
    id_goods INTEGER NOT NULL,
    CONSTRAINT link_goods_and_leafs_leafs_id_fk FOREIGN KEY (id_leafs) REFERENCES leafs (id),
    CONSTRAINT link_goods_and_leafs_goods_id_fk FOREIGN KEY (id_goods) REFERENCES goods (id)
);
CREATE UNIQUE INDEX link_goods_and_leafs_id_goods_uindex ON link_goods_and_leafs (id_goods);
CREATE TABLE link_layout_and_atribyte
(
    id INTEGER PRIMARY KEY NOT NULL,
    id_attribute INTEGER NOT NULL,
    id_goods_layout INTEGER NOT NULL,
    CONSTRAINT layout_atribyte_attributes_id_fk FOREIGN KEY (id_attribute) REFERENCES attributes (id),
    CONSTRAINT layout_atribyte_layouts_id_fk FOREIGN KEY (id_goods_layout) REFERENCES layouts (id)
);
CREATE TABLE link_layout_and_goods
(
    id INTEGER PRIMARY KEY NOT NULL,
    id_layouts INTEGER NOT NULL,
    id_goods INTEGER NOT NULL,
    CONSTRAINT goods_layout_layouts_id_fk FOREIGN KEY (id_layouts) REFERENCES layouts (id),
    CONSTRAINT goods_layout_goods_id_fk FOREIGN KEY (id_goods) REFERENCES goods (id)
);
CREATE UNIQUE INDEX goods_layout_id_goods_uindex ON link_layout_and_goods (id_goods);
CREATE FUNCTION _lt_q_regex(LTREE[], LQUERY[]) RETURNS BOOLEAN;
CREATE FUNCTION _lt_q_rregex(LQUERY[], LTREE[]) RETURNS BOOLEAN;
CREATE FUNCTION _ltq_extract_regex(LTREE[], LQUERY) RETURNS LTREE;
CREATE FUNCTION _ltq_regex(LTREE[], LQUERY) RETURNS BOOLEAN;
CREATE FUNCTION _ltq_rregex(LQUERY, LTREE[]) RETURNS BOOLEAN;
CREATE FUNCTION _ltree_compress(INTERNAL) RETURNS INTERNAL;
CREATE FUNCTION _ltree_consistent(INTERNAL, LTREE[], SMALLINT, OID, INTERNAL) RETURNS BOOLEAN;
CREATE FUNCTION _ltree_extract_isparent(LTREE[], LTREE) RETURNS LTREE;
CREATE FUNCTION _ltree_extract_risparent(LTREE[], LTREE) RETURNS LTREE;
CREATE FUNCTION _ltree_isparent(LTREE[], LTREE) RETURNS BOOLEAN;
CREATE FUNCTION _ltree_penalty(INTERNAL, INTERNAL, INTERNAL) RETURNS INTERNAL;
CREATE FUNCTION _ltree_picksplit(INTERNAL, INTERNAL) RETURNS INTERNAL;
CREATE FUNCTION _ltree_r_isparent(LTREE, LTREE[]) RETURNS BOOLEAN;
CREATE FUNCTION _ltree_r_risparent(LTREE, LTREE[]) RETURNS BOOLEAN;
CREATE FUNCTION _ltree_risparent(LTREE[], LTREE) RETURNS BOOLEAN;
CREATE FUNCTION _ltree_same(LTREE_GIST, LTREE_GIST, INTERNAL) RETURNS INTERNAL;
CREATE FUNCTION _ltree_union(INTERNAL, INTERNAL) RETURNS LTREE_GIST;
CREATE FUNCTION _ltxtq_exec(LTREE[], LTXTQUERY) RETURNS BOOLEAN;
CREATE FUNCTION _ltxtq_extract_exec(LTREE[], LTXTQUERY) RETURNS LTREE;
CREATE FUNCTION _ltxtq_rexec(LTXTQUERY, LTREE[]) RETURNS BOOLEAN;
CREATE FUNCTION index(LTREE, LTREE) RETURNS INTEGER;
CREATE FUNCTION index(LTREE, LTREE, INTEGER) RETURNS INTEGER;
CREATE FUNCTION lca(LTREE, LTREE) RETURNS LTREE;
CREATE FUNCTION lca(LTREE, LTREE, LTREE) RETURNS LTREE;
CREATE FUNCTION lca(LTREE, LTREE, LTREE, LTREE) RETURNS LTREE;
CREATE FUNCTION lca(LTREE, LTREE, LTREE, LTREE, LTREE) RETURNS LTREE;
CREATE FUNCTION lca(LTREE, LTREE, LTREE, LTREE, LTREE, LTREE) RETURNS LTREE;
CREATE FUNCTION lca(LTREE, LTREE, LTREE, LTREE, LTREE, LTREE, LTREE) RETURNS LTREE;
CREATE FUNCTION lca(LTREE, LTREE, LTREE, LTREE, LTREE, LTREE, LTREE, LTREE) RETURNS LTREE;
CREATE FUNCTION lca(LTREE[]) RETURNS LTREE;
CREATE FUNCTION lquery_in(CSTRING) RETURNS LQUERY;
CREATE FUNCTION lquery_out(LQUERY) RETURNS CSTRING;
CREATE FUNCTION lt_q_regex(LTREE, LQUERY[]) RETURNS BOOLEAN;
CREATE FUNCTION lt_q_rregex(LQUERY[], LTREE) RETURNS BOOLEAN;
CREATE FUNCTION ltq_regex(LTREE, LQUERY) RETURNS BOOLEAN;
CREATE FUNCTION ltq_rregex(LQUERY, LTREE) RETURNS BOOLEAN;
CREATE FUNCTION ltree2text(LTREE) RETURNS TEXT;
CREATE FUNCTION ltree_addltree(LTREE, LTREE) RETURNS LTREE;
CREATE FUNCTION ltree_addtext(LTREE, TEXT) RETURNS LTREE;
CREATE FUNCTION ltree_cmp(LTREE, LTREE) RETURNS INTEGER;
CREATE FUNCTION ltree_compress(INTERNAL) RETURNS INTERNAL;
CREATE FUNCTION ltree_consistent(INTERNAL, LTREE, SMALLINT, OID, INTERNAL) RETURNS BOOLEAN;
CREATE FUNCTION ltree_decompress(INTERNAL) RETURNS INTERNAL;
CREATE FUNCTION ltree_eq(LTREE, LTREE) RETURNS BOOLEAN;
CREATE FUNCTION ltree_ge(LTREE, LTREE) RETURNS BOOLEAN;
CREATE FUNCTION ltree_gist_in(CSTRING) RETURNS LTREE_GIST;
CREATE FUNCTION ltree_gist_out(LTREE_GIST) RETURNS CSTRING;
CREATE FUNCTION ltree_gt(LTREE, LTREE) RETURNS BOOLEAN;
CREATE FUNCTION ltree_in(CSTRING) RETURNS LTREE;
CREATE FUNCTION ltree_isparent(LTREE, LTREE) RETURNS BOOLEAN;
CREATE FUNCTION ltree_le(LTREE, LTREE) RETURNS BOOLEAN;
CREATE FUNCTION ltree_lt(LTREE, LTREE) RETURNS BOOLEAN;
CREATE FUNCTION ltree_ne(LTREE, LTREE) RETURNS BOOLEAN;
CREATE FUNCTION ltree_out(LTREE) RETURNS CSTRING;
CREATE FUNCTION ltree_penalty(INTERNAL, INTERNAL, INTERNAL) RETURNS INTERNAL;
CREATE FUNCTION ltree_picksplit(INTERNAL, INTERNAL) RETURNS INTERNAL;
CREATE FUNCTION ltree_risparent(LTREE, LTREE) RETURNS BOOLEAN;
CREATE FUNCTION ltree_same(LTREE_GIST, LTREE_GIST, INTERNAL) RETURNS INTERNAL;
CREATE FUNCTION ltree_textadd(TEXT, LTREE) RETURNS LTREE;
CREATE FUNCTION ltree_union(INTERNAL, INTERNAL) RETURNS LTREE_GIST;
CREATE FUNCTION ltreeparentsel(INTERNAL, OID, INTERNAL, INTEGER) RETURNS DOUBLE PRECISION;
CREATE FUNCTION ltxtq_exec(LTREE, LTXTQUERY) RETURNS BOOLEAN;
CREATE FUNCTION ltxtq_in(CSTRING) RETURNS LTXTQUERY;
CREATE FUNCTION ltxtq_out(LTXTQUERY) RETURNS CSTRING;
CREATE FUNCTION ltxtq_rexec(LTXTQUERY, LTREE) RETURNS BOOLEAN;
CREATE FUNCTION nlevel(LTREE) RETURNS INTEGER;
CREATE FUNCTION subltree(LTREE, INTEGER, INTEGER) RETURNS LTREE;
CREATE FUNCTION subpath(LTREE, INTEGER) RETURNS LTREE;
CREATE FUNCTION subpath(LTREE, INTEGER, INTEGER) RETURNS LTREE;
CREATE FUNCTION text2ltree(TEXT) RETURNS LTREE;
;